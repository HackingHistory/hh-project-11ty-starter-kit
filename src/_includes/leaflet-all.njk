{% block markup %}
  <section class="map-related">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
          integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
          crossorigin=""/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.control.min.css" />
    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
            integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
            crossorigin=""></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/iso8601-js-period@0.2.1/iso8601.min.js"></script>
    <!-- <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.min.js"></script> -->
     <script src="{{ '/js/leaflet.timeline.js' | url  }}"></script>  
    <style>
     .leaflet-map, #map { height: 500px; width: 100%;  }
    </style>


    <div id="map"></div>
{% endblock %}
{% block script %}
  <script>
   let map = L.map('map', {
       // try Leaflet.timeline instead
       /* timeDimension: true,
        * timeDimensionControl: true,
        * timeDimensionControlOptions: {
        *     timeSliderDragUpdate: true,
        *     loopButton: true,
        *     autoPlay: true,
        *     playerOptions: {
        *         transitionTime: 1000,
        *         loop: true
        *     } */
       //},
   }).setView({{ center | stringify | safe }}, {{ zoom }});
   L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
       attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
       maxZoom: 18,
       id: 'mapbox/streets-v11',
       tileSize: 512,
       zoomOffset: -1,
       accessToken: 'pk.eyJ1IjoidGl0YW5pdW1ib25lcyIsImEiOiJjazF0bTdlNXQwM3gxM2hwbXY0bWtiamM3In0.FFPm7UIuj_b15xnd7wOQig'
   }).addTo(map);
   let allMapData = [],
       allMapLayers = [],
       allMapButtons = [],
       allMapPages;
   timelineControl = L.timelineSliderControl({
       formatOutput: function (date) {
           return new Date(date).toLocaleDateString();
       },
       enableKeyboardControls: true,
   });
   timelineControl.addTo(map);

   fetch("{{'/all-map-layers.json' | url }}")
       .then(response => response.json())
       .then(json => json.layers)
       .then(layers => {
           /* unitedObject = 
            * layers.reduce */
           layers.map(m => console.log(m.title, m.geojson.features))
           layers.map ((thisMap) => {
               let button = `<li><a href="${thisMap.url}">${thisMap.title}</a></li>`
               let data = thisMap.geojson
               timeline = L.timeline(data, {
                   /* style: function (data) {
                    *     return {
                    *         stroke: false,
                    *         color: getColorFor(data.properties.name),
                    *         fillOpacity: 0.5,
                    *     }; */
                   //},
                   waitToUpdateMap: true,
                   onEachFeature: function (feature, layer) {
                       layer.bindTooltip(feature.properties.name);
                   },
               });

               timeline.addTo(map);
               timelineControl.addTimelines(timeline);
               /* let newLayer = L.geoJSON( thisMap.geojson , {
                *     //style: function (feature) {
                *     //    return {color: feature.properties.color};
                *     //}
                * }).bindPopup(function (layer) {
                *     return layer.feature.properties.description;
                * })
                * console.log(newLayer)
                * newLayer.addTo(map)
                * allMapButtons += button
                * allMapLayers += newLayer
                * // now do timedimension-specific stuff
                * let tdLayer = L.timeDimension.layer.geoJson(newLayer, {
                *     updateTimeDimension: true,
                *     duration: null,
                *     updateTimeDimensionMode: 'extremes',
                *     addlastPoint: true
                * });
                * tdLayer.addTo(map) */
           })
       })
  </script>
{% endblock %}

{% block closing %}

  </section>

{% endblock %}


{% block extralayers %}
  

{% endblock %}
